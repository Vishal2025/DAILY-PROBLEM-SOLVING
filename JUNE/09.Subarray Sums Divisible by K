/*
Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
2 <= k <= 104
*/

*******************************************SOLUTION****************************************

class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {

        unordered_map<int,int>m;
        long long int s=0,cnt=0;

        m[0]=1;

        for(int i=0;i<nums.size();i++){

            s=s+nums[i];
            int d=s%k;

            if(d<0) d=d+k;

            if(m.find(d)!=m.end()) cnt+=m[d];;
            
            m[d]++;
        }
        return cnt;
    }
};
