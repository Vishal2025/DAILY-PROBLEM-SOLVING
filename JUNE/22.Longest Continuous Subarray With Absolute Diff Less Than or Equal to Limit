/*
Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.

 

Example 1:

Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 <= 4.
[8,2] with maximum absolute diff |8-2| = 6 > 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 > 4.
[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.
[2] with maximum absolute diff |2-2| = 0 <= 4.
[2,4] with maximum absolute diff |2-4| = 2 <= 4.
[2,4,7] with maximum absolute diff |2-7| = 5 > 4.
[4] with maximum absolute diff |4-4| = 0 <= 4.
[4,7] with maximum absolute diff |4-7| = 3 <= 4.
[7] with maximum absolute diff |7-7| = 0 <= 4. 
Therefore, the size of the longest subarray is 2.
Example 2:

Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4 
Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.
Example 3:

Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3
 

Constraints:

1 <= nums.length<=1e5
1 <= nums[i]<=1e9
0 <= limit<=1e9
*/

**************************************SOLUTION**************************************

class Solution {
public:
    int longestSubarray(vector<int>& nums,int limit) {

        int n=nums.size();
        int ans=0;
        int start=0,end=0;
        map<int,int>freq;

        while(end<n){

            freq[nums[end]]++;
            int minEle=freq.begin()->first;
            int maxEle=(--freq.end())->first;

            if((maxEle-minEle)<=limit)
                ans=max(ans,end-start+1);

            else{ 
                while(start <= end && (maxEle-minEle)>limit){

                    freq[nums[start]]--;

                    if(freq[nums[start]]==0)
                        freq.erase(nums[start]);
                    
                    minEle=freq.begin()->first;
                    maxEle=(--freq.end())->first;

                    start++;
                }
            }
            end++;
        }
        return ans;
    }
};
