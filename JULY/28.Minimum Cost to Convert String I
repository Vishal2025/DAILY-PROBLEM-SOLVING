/*
You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English letters. You are also given two 0-indexed character arrays original and changed, and an integer array cost, where cost[i] represents the cost of changing the character original[i] to the character changed[i].

You start with the string source. In one operation, you can pick a character x from the string and change it to the character y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y.

Return the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1.

Note that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].

 

Example 1:

Input: source = "abcd", target = "acbe", original = ["a","b","c","c","e","d"], changed = ["b","c","b","e","b","e"], cost = [2,5,5,1,2,20]
Output: 28
Explanation: To convert the string "abcd" to string "acbe":
- Change value at index 1 from 'b' to 'c' at a cost of 5.
- Change value at index 2 from 'c' to 'e' at a cost of 1.
- Change value at index 2 from 'e' to 'b' at a cost of 2.
- Change value at index 3 from 'd' to 'e' at a cost of 20.
The total cost incurred is 5 + 1 + 2 + 20 = 28.
It can be shown that this is the minimum possible cost.
Example 2:

Input: source = "aaaa", target = "bbbb", original = ["a","c"], changed = ["c","b"], cost = [1,2]
Output: 12
Explanation: To change the character 'a' to 'b' change the character 'a' to 'c' at a cost of 1, followed by changing the character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. To change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is incurred.
Example 3:

Input: source = "abcd", target = "abce", original = ["a"], changed = ["e"], cost = [10000]
Output: -1
Explanation: It is impossible to convert source to target because the value at index 3 cannot be changed from 'd' to 'e'.
 

Constraints:

1 <= source.length == target.length <= 1e5
source, target consist of lowercase English letters.
1 <= cost.length == original.length == changed.length <= 2000
original[i], changed[i] are lowercase English letters.
1 <= cost[i] <= 1e6
original[i] != changed[i]
*/

*************************************SOLUTION*************************************

class Solution {
public:
 int shortestPath(int V,int src,int des,vector<vector<pair<int,int>>>&adj){
     priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
     vector<int>dis(27,1e7);
     pq.push({0,src});
     while(!pq.empty()){
         int ic=pq.top().first;
         int cn=pq.top().second;
         if(cn==des) return ic;
         dis[cn]=ic;
         pq.pop();
         for(int i=0;i<adj[cn].size();i++){
             auto it=adj[cn][i];
             if(it.second+ic<dis[it.first])
             pq.push({it.second+ic,it.first});
         }
     }
     return dis[des];
 }
    long long minimumCost(string src, string tar, vector<char>& org, vector<char>& cha, vector<int>& cost) {
        int n=org.size();
        vector<vector<pair<int,int>>>adj(27);
        for(int i=0;i<n;i++){
            char u=org[i];
            char v=cha[i];
            int c=cost[i];
            adj[u-97].push_back({v-97,c});
        }
        long long ans=0;
        vector<vector<int>>dp(27,vector<int>(27,1e9));
        for(int i=0;i<src.length();i++){
            if(src[i]!=tar[i]){
                if(dp[src[i]-97][tar[i]-97]!=1e9) ans+=dp[src[i]-97][tar[i]-97];
                else{
                int cc=shortestPath(n,src[i]-97,tar[i]-97,adj);
                if(cc==1e7) return -1;
                dp[src[i]-97][tar[i]-97]=cc;
                ans+=cc;
                }
            }
        }
        return ans;
    }
};
