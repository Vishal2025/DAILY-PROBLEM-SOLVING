/*
You are given a string s and two integers x and y. You can perform two types of operations any number of times.

Remove substring "ab" and gain x points.
For example, when removing "ab" from "cabxbae" it becomes "cxbae".
Remove substring "ba" and gain y points.
For example, when removing "ba" from "cabxbae" it becomes "cabxe".
Return the maximum points you can gain after applying the above operations on s.

 

Example 1:

Input: s = "cdbcbbaaabab", x = 4, y = 5
Output: 19
Explanation:
- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.
Example 2:

Input: s = "aabbaaxybbaabb", x = 5, y = 4
Output: 20
 

Constraints:

1 <= s.length <= 1e5
1 <= x, y <= 1e4
s consists of lowercase English letters.
*/

**********************************************SOLUTION***********************************

class Solution {
    public:
    int helper(stack<char>& st, string s, string t, int num) {
        int ans = 0;
        for (auto ch : s) {
            if (!st.empty() && st.top() == t[0] && ch == t[1]) {
                st.pop();
                ans += num;
            } else {
                st.push(ch);
            }
        }
        return ans;
    }


    int maximumGain(string s, int x, int y) {
        stack<char> st;
        string t=x>y?"ab":"ba";
        int ans = helper(st, s, t, max(x, y));

        s = "";
        while (!st.empty()) {
            s += st.top();
            st.pop();
        }
        reverse(s.begin(), s.end());
        swap(t[0], t[1]);
        ans += helper(st, s, t, min(x, y));
        return ans;
    }
};
